import {
  MiddlewareConsumer,
  Module,
  NestModule,
  RequestMethod,
} from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { ProductsModule } from './products/products.module';
import { OrdersModule } from './orders/orders.module';
import * as cors from 'cors';

@Module({
  imports: [ProductsModule, OrdersModule],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer): void {
    consumer.apply(cors()).forRoutes({
      path: '*',
      method: RequestMethod.ALL,
    });
  }
}

/* W funkcji apply podajemy middleware, którego chcemy użyć. Możemy podać kilka,
oddzielając je przecinkiem.

Metoda forRoutes służy do zdeniowania, dla jakich adresów i metod chcemy używać tego
middleware

W forRoutes możemy także podać nazwę konkretnego controllera, jeśli chcemy
zastosować middleware jedynie dla niego.
.forRoutes(ProductsController)

*/

// module 31
// #1 https://github.com/ufsowa/MyNewsApp/tree/main

// module 32
// #1 https://a557a798-8e2a-4bad-a61d-77504673db89-00-3drq4vccrxowm.spock.replit.dev

// module 33 typescript

// #1 https://www.typescriptlang.org/play/?&q=99#code/PTCMDoCgQAgLQIYBMCmBrANggTgVwFYwD2SADkQO4CWKSAdjTAC4CepLMSWMAXgLY06dFgGMAFgBoYAIypFsgUEARMckhi4KCAOaBMQBXYebKgGcWmuik5EYDcTE3YmRQNqAIqtGAwA0kQYoRPH76hlpETAQwKHS4fJzc2ADPGOqAPoAsTGiUDGgJFDBUMMaZBizGTAiEPDY0ocEcAAa4xijYAEpEGCj1UJCdTDAAZkREAFw2MdItMAA+4xjJALwwAKwA3JBD1kugAAzrmzBL0fPrvSj90jhjZdhUdFqHMADkAGLDl9gAhE-rH49PTBQZR+kEgrFIlmifAACjgELEjhMWrMbncHrNjhhVjAzv0oWMobDsPDHmtIFD-gA2EEUxHzUFRGIwbAdIEwADekBgMAAggARACyAEkAHL-ZACOhPCRcmACgDyfIAoq0eQAVeWtf58EgtBBObDS2UAVQAyir-k0WkaAL6nPrqZptVljFmdYyPN1A8D84Ui9ZW52dT2s4zgM0qgNO9rBpZesMK5WqjWte3nR0tIXGAAyRC0WloY2kw06CDojyYeBQUczObzBbUSwGCAwzVOIAATFBYKbMnQ0NhziweBFyAwUsZDDBMkhu54AOqT0oZRiVqdEWToVgwRpO+UWepSXctNUUIj1fI7wNqsSDroqSh3YTT+SGMoIQDggLwYPhaBZauCuBSGgTAJNgHB0C2KBTpBPCaF+9TGk63QeDAABSCBoAgD7UEI2HSCwX6-rUNy4CBuDEgA-DAgDegCgBHMNYTTlBgVAflIRCkCUhDGFQeiQTAmHhC2FiVAgDhOK4BSsHYG40CBuRzjAIqMHwTQmFUxRvuUX6sBgmTfhQ0i4EglBlqIYjMGwuRSDqKRAlUAAU2GQRQ6Zqbxk4AJRWEgn7MrkfgpPYgBCgAgxgWD0sDGpoWgICMqEQDuXoXkE5C4XQ1gEV+nEmGYZaWJMPDkM4g70HIP6YdY9RPBKdxPDMO46qgxIGg1szHtg3TwPCVDhf0gIkVpy4VN+9SMnwF5cSEYRmf+1h5DwyBllQuAqDQ2AUEufBKV2MBqgg0isSI2GdcYF4eQU2XEGQj5-hVYRsHNCCfHK2FODIhHMIdx3YXJW65FZpBrYhyFKQAzOAO4mLm+a0FNj5CFlX0UGFUlnlJCjEKQIj4L4IkKFDApEPZk6MbwLKyF+VCoHQMmBDQUj4Jh9h1KQyBoGtnG4-jGDCHY7PEnw5yJHkAy4P2uMFIAyATQ3WcNIJRRYligZYobAAAsUP1FCkzYOdOFPsjX7kJWQlzZYzMGQARJOrAUJB1vfUdVAncBoHErw4mTpYfDYQIKBfqZaBheVljlGgWOkeR2B6FbzB6jwMqwNh1A6Mo5C8ctQdECHyBBGuHAoJ0wt0ywUhaEgPCMEgmjrS0W08JY6VPhw126y0KB8FI70GP4BSovcNA7WCbCWEhUxLJy3IYHmdzXJWaLrNyXcIFQGAL7c9zL4JBYEki2A716rqhjvMP1rQSsyCrZbrHaoIiL4ZQZtg+4oGME-YI80-cjAs9aPPZ4gZQBGl-pEP268xhPGAQAAS0BAjA4BH58FAb-bQ78YAdh2DKMBx9mShh9IKUUODf7nwVmMSsuAUCQBtA-J+-Rrxng-k6b+soZ5zzoFAwMHZUErwQVwp0HY4EIKQUQFBJDuToLGODbBbD8GdBPu6cAiYVTqk1DQuhdBn7XlvCgDBn9WFgP-oA6BTpwa8PAWvDeQCzHCKsaI8RcipEwA1rI3BLp5Hel9KKDRkBH5aIYU6YwzCWgAG0AC6jwIk1n1uAYGxgxCOUDG-KQjCiCpKdDeO8XlTj+Ofh3fWYxQkFKkCUwoi97iRKWKE5YUgAAcUgnh1KeOE3J9DBLYGwEUweWgpA9NKQfKpMBQlPDQkQMQUpGl1UmZgnY4TQQgEhqhXsvgBxDhHIQVAmA4S40sOLSW+AqBSAjoJBiapTT2BoFXPqIUpABBQLUFufhyzGFUNXFA8FCh8QfB0rQMQojlHED3b6aB7KVTQFdHQ1zw5sF4BQYkJ1RL2BwJJNwSl5xuAUMFLiCARAEC7hwcINh3o-Vdg0QMBsqhLT8gwbCSA8AAIeeky56cYB2Qci+Eo74vxVEAjuT+F5yjdxgJXd56hAjhV5dYJa5SiDGCyCgKKng+TcHhLIJg-MxBjFNFxBIxlCAkEgp0QAXoBfjyMHf5fBAWHP2qaAAtNhPs0dcZ6HqGgFALAiADAvAUCgLBhrcp-FjUyxBwRzT6ioOEwtKyA32WgKWxySSisYL+Z+H07KsTcj0PJ-RkBIAMUsRyxjOHlK3r0yxkDS1oh7nvMpx94xeRCV-BYAA+Dkcic0vybd-P+HCpCr3XjWlAUgvQwHvmAilcSmiJMDDkuRg5wjYHLIGO+oJwSWEDF4D1Holjus9QMGAn91jrpfkSeEO6q33EagUxq8Y2kBOZF3IgAA3FABaYCOUFvCEU8IMGbu3VIL9fAABqLYqFjEDGevgxhG3FlZGWQ4baf7ck7XcVAAAPR4k6BhoaFHQDDSSWGtpfqEoDP7hZVIWEsIDoGMBULnROoJ4BXnHRQI5NDKB0NSFAAx3+C6KLlkodWXxna82fwvY5cAUmKVNoiY2mAz6iA00Q+2sBQxsCOU7YGYgB6KU+WQ2AwSSB81OkIy0cAxaMnmYHRgKz2BwDoLs+AL0vHuS0NoX49pBYmDvs-VG8jf6nRbtKIBqNtHwOnqjTB7tswJaoBwxYRsSH53nAEy-MMCWkBmebW2wMpH-O-so9RsLYGUBzo8yALWqEXgS3jczHcgtmgvBoBgJACMMrYWmiwfAOpPktmLAnNAz9+sLXkkpNCKBnCsVDSUP2g2yiAcRgJV5OB5WfMeSUVIohVqDFq1LBrq2UBKgQerTwE2psFGOjwaQOhjnWCeQJU2xIQJmSIljK2o30CXlwGkL8cb9v1EaygHkBZTswFNL+3bBzLCA8O8dqxPqDv62B6Dwo72fsitmm5S8QRLpk1dpZPIKRkBREKJnPVbKSAsBw5keCSlEBIEuIQX89AWbWCcD3BiRRVkLuHK9qHdXXVA+a8XNrUMGfoCwHgZnmEajs7YFze5nNfx8A4HkeoOHRfha6MCiOYLH4yChWKuCCKCpKT5CQfUtPrABvKPgJQ35rYnr+TgJAxgnbsYGMcseXr8hMFnF5KQ-Aqc04iEwPQ-38B6AjpzjgFFcDiF6ggMKVl9LVSB-D9eF4Rup4MrD5HIOdeoSWp0FIQQSAJ1CEzWXP4gQDVhRrlrSBtdTU232NZGqWCxD9WeMKDBcDZvaRnhBjxHLPpbJvNE8mekqfZI+xd5Zx-JFoZ2oHhfR9L-3nwPW8mb3Ebn-xpdCmWxjrXWPSNyOoMXpnxiA+6xV+HZF610fmvWva7GEDq-8nP9Rdn3IqgB6jk66vur+zepWhwVGzwPSTwPkh+5Yw+VijkoB2uXkcixczQ8+aWa+BYSBTeKBviIAywSkKy-YvOGyAuLqO4TAVATAnQAAwsdGgAABJlhcAtDdQM5M7ECMSx62qXK0DVzJ75DBT1BMBiAmAXg3bQqsx+CEBbRYSGCaAhTEoqAfKZQqH1BMFqgCjZgABCuATATgdASoJcAKYOxoEIDsVAhAtQosQU3BrAwqYK9QdwwMTAJhXcF4PAcq5QQQEqnQ1cvgHABQqaA00qfqIcwRdAbhH6mh2h2YeGbhHhpcTA9QqBnmD61BtBKADBrszBrBnQzaUOIg1BvgQB4hwSMAWhOh+hhhvgyRAK+mciYhJgDmxmSor6dM2YJggIFgGmTwIgjB0oH6Pk++ciYCeSrIFmeYjkTwXgrEaAfgH05A2MeoUsUm4AMBciNoqBEx7SrhBhyRjwpkeKKR4AAAjlQuBKaMXP4AaLMeAAcUwHarcSgj5OFFUfEYkYcaYXTDvNyE8ckeAEvlQv8AAOJY4oDfA0JAA
// #2 https://github.com/ufsowa/module33

// module 34
//https://github.com/ufsowa/module34

// #1  https://github.com/ufsowa/module34/commit/57afbafc40de5efafc4cb5653e5fc3766350edbf
// #2  https://github.com/ufsowa/module34/commit/547314af7780d86093bb741a0a97362e828920fd
